# Event types:

# tick - Generated by Data Handler and added to queue

# signal - Generated by strategy module. Fed through to portfolio module which calls risk.

# order - Generated by portfolio & handled by execution module

# fill - Generated by execution module & handled by portfolio


from datetime import datetime
import collections


class event:
    
    def __init__(self, event_type):
        self.type = event_type
        self.time = datetime.utcnow()
        


class event_queue:
    
    def __init__(self):
        self.queue = collections.deque()
        
    def add_to_queue(self, eventobject):
        self.queue.append(eventobject)
    
    def handle_next(self):
        if self.queue:
            event = self.queue.popleft()
            if event == None:
                pass
            elif event.type == 'tick':
                #Call strategy
                self.add_to_queue(strategy.generate_signal(eventobject))
                print('Tick Event Popped')

            elif event.type == 'signal':
                #Call risk
                print('Signal Event Popped')
            elif event.type == 'trade':
                #Call portfolio
                print('Trade Event Popped')
            elif event.type == 'order':
                #Call execution
                print('Order Event Popped')
            elif event.type == 'fill':
                #Wait in execution function until response received
                #Call portfolio
                print('Fill Event Popped')
        else:
            print('Queue is empty')

